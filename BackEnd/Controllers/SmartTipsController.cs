using System.Globalization;
using System.Net.Http.Headers;
using System.Security.Claims;
using System.Text;
using System.Text.Json;
using BackEnd.Data;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;

namespace BackEnd.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class SmartTipsController : ControllerBase
    {
        private readonly IHttpClientFactory _IHttpClientFactory;
        private readonly InnoviaHubDbContext _context;

        public SmartTipsController(IHttpClientFactory IHttpClientFactory, InnoviaHubDbContext context)
        {
            _IHttpClientFactory = IHttpClientFactory;
            _context = context;
        }

        [HttpGet]
        [Authorize]
        public async Task<IActionResult> SmartTips([FromQuery] string? ResourceType, [FromQuery] DateTime? date, [FromQuery] int? resourceId)
        {
            // Kolla om user id finns i token.
            var userid = User.FindFirstValue(ClaimTypes.NameIdentifier)?.Trim();
            if (string.IsNullOrEmpty(userid))
                return Unauthorized("Userid not found in token");

            //H√§mta all information om bookings.
            var bookings = await _context.Bookings.ToListAsync();

            // Kolla om det finns n√•gra bokningar.
            if (bookings.Count == 0)
            {
                return Ok(new { tip = "Det finns inga bokningar √§nnu - passa p√• att boka n√§r som helst" });
            }

            var today = DateTime.Today;

            // samla ihop data i grupper.
            var BookingsGrouped = bookings
                .Where(b => b.Date.ToLocalTime().Date >= today) // Endast idag eller fram√•t
                .GroupBy(b => b.Date.ToLocalTime().Date)
                .Select(g => new { Date = g.Key, count = g.Count() })
                .ToList();

            if (BookingsGrouped.Count == 0)
            {
                // Detta hanteras redan ovan men kan vara en bra "fallback"
                return Ok(new { tip = "Inga framtida bokningar √§nnu, passa p√• att boka n√§r det passar dig! üåü" });
            }

            // Hitta dagen med minst bokningar bland de framtida
            var leastBusyDay = BookingsGrouped
                .OrderBy(g => g.count)      // Sortera efter l√§gst antal bokningar
                .ThenBy(g => g.Date)        // V√§lj det tidigaste datumet om det √§r lika antal
                .First();

            // Hitta dagen med mest bokningar bland de framtida
            var mostBusyDay = BookingsGrouped
                .OrderByDescending(g => g.count) // Sortera efter h√∂gst antal bokningar
                .ThenBy(g => g.Date)             // V√§lj det tidigaste datumet om det √§r lika antal
                .First();

            var swedishCulture = new CultureInfo("sv-SE");

            var leastBusyDayInWeek = leastBusyDay.Date
                .ToString("dddd dd MMMM", swedishCulture);

            var mostBusyDayInWeek = mostBusyDay.Date
                .ToString("dddd dd MMMM", swedishCulture);

            string prompt;

            // H√§r kontrollerar vi om vi har ett datum/vald dag om det inte finns en vald dag ska ha kolla bokningar och skriva ut ett tips som passar anv√§ndaren och den resurs den valt. 
            if (!date.HasValue)
            {
                prompt = $@"
                    Du √§r en rolig och trevlig assistent f√∂r InnoviaHubs bokningssystem.
                    
                    Resurstyp: {ResourceType ?? "Valfri resurs"}

                    - Mest bokade i veckan: {mostBusyDayInWeek} 
                    - Minst bokade i veckan: {leastBusyDayInWeek}

                    Baserat p√• bokningsdata, ge ett kort personligt tips till anv√§ndaren om vilken dag som kan vara bra att boka.
                    H√•ll tipset kort och anv√§nd g√§rna roliga och gulliga emojis. Ge tips endast p√• framtida dagar ignorera dagar som redan passerat.
                ";
            }
            else
            {
                var targetDate = date.Value.Date;
                // h√§r samlar vi ihop alla bokningar p√• en dag till en lista d√• den dagen anv√§ndaren valt.
                var bookingsForday = bookings
                    .Where(b => b.Date.Date == targetDate)
                    .ToList();

                // Ist√§llet f√∂r suggestedResource
                var selectedResource = await _context.Resources.FirstOrDefaultAsync(r => r.ResourcesId == resourceId);
                string resourceName = selectedResource?.Name ?? "resurs";

                // F√∂rst h√§mtas alla timeslots. 
                var allTimeSlots = await _context.TimeSlots.ToListAsync();

                // H√§r sammanfattas nu bokningssatus f√∂r dagen baserat p√• antalet bokningar.
                string bookingStatus = bookingsForday.Count == 0 ? "inga bokningar alls" : bookingsForday.Count < 3 ? "N√•gra bokningar" : "Ganska fullt";

                // H√§r skrivs informationen in i prompten som sen anv√§nds i content f√∂r att ai ska veta hur den ska skriva ut tipset.
                prompt = $@"
                Du √§r en trevlig assistent f√∂r InnoviaHubs bokningssystem üéâ

                H√§r √§r bokningsinformationen:
                - Datum: {date:yyyy-MM-dd} (anv√§nd exakt detta datum och skriv det inte om)
                - Resurs: {resourceName} (anv√§nd exakt detta namn)
                - Bokningsstatus: {bookingStatus}

                Ge anv√§ndaren ett **kort och personligt tips** (1‚Äì2 meningar).  
                - Om det √§r m√•nga bokningar, f√∂resl√• ett lugnare alternativ.  
                - Om det √§r f√• bokningar, uppmuntra anv√§ndaren att boka!  
                - Skriv endast om datumet ovan.  
                Anv√§nd emojis och en glad ton, men h√•ll det kort och relevant.  
                ";
            }

            // H√§r skapas ai och man skriver vilken gpt model man vill anv√§nda samt skapar rollerna. 
            var http = _IHttpClientFactory.CreateClient("openai");
            var body = new
            {
                model = "gpt-4.1",

                input = new object[]
                {
                    new {
                        role = "system",
                        content = prompt
                    },
                    new {
                        role = "user",
                        content = prompt
                    }
                },
            };

            //Skapar inneh√•llet som ska skickas till OpenAI API:t. G√∂r ocks√• en seralisering.
            var content = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json");
            // Skickar informationen till open ai till deras endpoint responses med json inneh√•ll bland annat prompt.
            var response = await http.PostAsync("responses", content);
            // L√§ser av svaret som text fr√•n API:et. 
            var raw = await response.Content.ReadAsStringAsync();

            System.Console.WriteLine("raw" + raw);

            try
            {
                //F√∂rs√∂ker tolka (parsa) det r√•a svaret som JSON s√• att vi kan l√§sa strukturerad data ur det.
                var doc = JsonDocument.Parse(raw);
                //H√§mtar sj√§lvs textsvaret fr√•n openai och sen navigerar vi igenom Json i det olika stegen tills det blir text. 
                var answer = doc.RootElement
                    .GetProperty("output")[0]
                    .GetProperty("content")[0]
                    .GetProperty("text").GetString();
                
                // h√§r returnerar vi tipset som Json till klienten. 
                return Ok(new { tip = answer });
            } catch {
                // Om n√•got d√• g√•r fel vid h√§mtningar eller omskriv s√• returneras ett standard fel. 
                return Ok(new { tip = "Kunde inte h√§mta tips just nu prova igen senare üôà" });
            }
        }
    }
}
