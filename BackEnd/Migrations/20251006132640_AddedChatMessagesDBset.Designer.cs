// <auto-generated />
using System;
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(InnoviaHubDbContext))]
    [Migration("20251006132640_AddedChatMessagesDBset")]
    partial class AddedChatMessagesDBset
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.AI.AIChatMessage", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFromAI")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("AIChatMessages");
                });

            modelBuilder.Entity("BackEnd.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "017eb576-78cb-470b-a0ac-14e597d91ec6",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOwrBqNdUERpiroWdqBA2zk5UUEqBTmNm0oB19avAuipobOemWxpQ4YiMLtLskDdsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35c385c4-4dd9-43d1-a380-16c9f2f6db74",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e46ce5d-cb0b-4f7d-b857-2ee559b065a5",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6SMKonCOpYPVHGhR3yOCUUqpYWdq4Z/ZW7RtjGoy3/3m8Eeef9ioX3vIkAHce/2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b489eb6b-44bf-4cdf-8001-ff3287cecfc8",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("BookingId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BackEnd.Models.ResourceType", b =>
                {
                    b.Property<int>("ResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResourceTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ResourceTypeId");

                    b.ToTable("ResourceTypes");

                    b.HasData(
                        new
                        {
                            ResourceTypeId = 1,
                            Name = "Drop-in skrivbord"
                        },
                        new
                        {
                            ResourceTypeId = 2,
                            Name = "Mötesrum"
                        },
                        new
                        {
                            ResourceTypeId = 3,
                            Name = "VR"
                        },
                        new
                        {
                            ResourceTypeId = 4,
                            Name = "AI"
                        });
                });

            modelBuilder.Entity("BackEnd.Models.Resources", b =>
                {
                    b.Property<int>("ResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResourcesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnType("int");

                    b.HasKey("ResourcesId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            ResourcesId = 1,
                            Name = "Skrivbord 1",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 2,
                            Name = "Skrivbord 2",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 3,
                            Name = "Skrivbord 3",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 4,
                            Name = "Skrivbord 4",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 5,
                            Name = "Skrivbord 5",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 6,
                            Name = "Skrivbord 6",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 7,
                            Name = "Skrivbord 7",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 8,
                            Name = "Skrivbord 8",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 9,
                            Name = "Skrivbord 9",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 10,
                            Name = "Skrivbord 10",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 11,
                            Name = "Skrivbord 11",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 12,
                            Name = "Skrivbord 12",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 13,
                            Name = "Skrivbord 13",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 14,
                            Name = "Skrivbord 14",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 15,
                            Name = "Skrivbord 15",
                            ResourceTypeId = 1
                        },
                        new
                        {
                            ResourcesId = 16,
                            Name = "Mötesrum 1",
                            ResourceTypeId = 2
                        },
                        new
                        {
                            ResourcesId = 17,
                            Name = "Mötesrum 2",
                            ResourceTypeId = 2
                        },
                        new
                        {
                            ResourcesId = 18,
                            Name = "Mötesrum 3",
                            ResourceTypeId = 2
                        },
                        new
                        {
                            ResourcesId = 19,
                            Name = "Mötesrum 4",
                            ResourceTypeId = 2
                        },
                        new
                        {
                            ResourcesId = 20,
                            Name = "VR 1",
                            ResourceTypeId = 3
                        },
                        new
                        {
                            ResourcesId = 21,
                            Name = "VR 2",
                            ResourceTypeId = 3
                        },
                        new
                        {
                            ResourcesId = 22,
                            Name = "VR 3",
                            ResourceTypeId = 3
                        },
                        new
                        {
                            ResourcesId = 23,
                            Name = "VR 4",
                            ResourceTypeId = 3
                        },
                        new
                        {
                            ResourcesId = 24,
                            Name = "AI",
                            ResourceTypeId = 4
                        });
                });

            modelBuilder.Entity("BackEnd.Models.TimeSlots", b =>
                {
                    b.Property<int>("TimeSlotsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TimeSlotsId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("endTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("startTime")
                        .HasColumnType("time(6)");

                    b.HasKey("TimeSlotsId");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            TimeSlotsId = 1,
                            Duration = 2,
                            endTime = new TimeSpan(0, 10, 0, 0, 0),
                            startTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            TimeSlotsId = 2,
                            Duration = 2,
                            endTime = new TimeSpan(0, 12, 0, 0, 0),
                            startTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            TimeSlotsId = 3,
                            Duration = 2,
                            endTime = new TimeSpan(0, 14, 0, 0, 0),
                            startTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            TimeSlotsId = 4,
                            Duration = 2,
                            endTime = new TimeSpan(0, 16, 0, 0, 0),
                            startTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            TimeSlotsId = 5,
                            Duration = 4,
                            endTime = new TimeSpan(0, 12, 0, 0, 0),
                            startTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            TimeSlotsId = 6,
                            Duration = 4,
                            endTime = new TimeSpan(0, 16, 0, 0, 0),
                            startTime = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            TimeSlotsId = 7,
                            Duration = 8,
                            endTime = new TimeSpan(0, 16, 0, 0, 0),
                            startTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackEnd.Models.Booking", b =>
                {
                    b.HasOne("BackEnd.Models.Resources", "Resource")
                        .WithMany("Bookings")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.TimeSlots", "TimeSlot")
                        .WithMany("Bookings")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.AppUser", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("TimeSlot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.Resources", b =>
                {
                    b.HasOne("BackEnd.Models.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackEnd.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackEnd.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackEnd.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.AppUser", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BackEnd.Models.ResourceType", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("BackEnd.Models.Resources", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BackEnd.Models.TimeSlots", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
